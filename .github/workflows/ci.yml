name: build-wheels

on:
  # Do this when a new release is published
  push:
    branches: [ master ]
  pull_request:
  release:
    types: [ published ]

jobs:
  # Build for manylinux, which allows it to be run on many different Linux platforms
  build-and-test:
    strategy:
      matrix:
        runner: [ ubuntu-latest, macos-14 ]
    runs-on: ${{ matrix.runner }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    # Set up the repository with the Docker container action, which will allow us to build and run a manylinux Docker
    # container that will ensure compatibility. See the action repository for more info.
    - uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    # poetry update will install all dependencies for our package, as well as maturin, which we use as our build
    # back-end
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Check if Cargo.toml version & pyproject.toml version match
      if: matrix.runner == 'ubuntu-latest'
      run: |
        CARGO_VERSION=$(grep -e '^version\s*=\s*"' Cargo.toml | head -1 | cut -d '"' -f2)
        POETRY_VERSION=$(poetry version -s)
        if [ "$CARGO_VERSION" != "$POETRY_VERSION" ]; then
          exit 1
        fi

    - name: Poetry install
      run: poetry install --sync --no-root
      working-directory: ${{ github.workspace }}

    - name: Build wheels
      if: matrix.runner != 'macos-14'
      uses: PyO3/maturin-action@v1
      with:
        command: develop
        sccache: true
      env:
        VIRUTAL_ENV: ${{ github.workspace }}/.venv

    - name: cargo test
      run: cargo test
      working-directory: ${{ github.workspace }}

    - name: Build wheels
      if: matrix.runner == 'macos-14'
      uses: PyO3/maturin-action@v1
      with:
        command: develop
        target: aarch64-apple-darwin
        args: --release -F metal
        sccache: true
      env:
        VIRUTAL_ENV: ${{ github.workspace }}/.venv
    
    - name: poetry pytest
      run: poetry run pytest tests -s
      working-directory: ${{ github.workspace }}
  
  build-macos:
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    needs: [ build-and-test ]
    runs-on: macos-14
    strategy:
      matrix:
        py-version: [ '3.9', '3.10', '3.11', '3.12' ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py-version }}
      # The x86_64 Rust toolchain is installed on GitHub runners, but since we compile also for Apple Silicon, we also
      # need the correct Rust toolchain.
      - name: Rustup install aarch64 target
        run: rustup target add aarch64-apple-darwin

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: aarch64-apple-darwin
          args: --release -F metal --out dist -i ${{ matrix.py-version }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheel-darwin-${{ matrix.py-version }}
          path: ${{ github.workspace }}/dist/*

  build-windows:
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    needs: [ build-and-test ]
    runs-on: windows-latest
    strategy:
      matrix:
        py-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: x64
          args: --release --out dist -i ${{ matrix.py-version }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheel-windows-${{ matrix.py-version }}
          path: ${{ github.workspace }}/dist/*

  build-linux:
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    needs: [ build-and-test ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        py-version: [ '3.9', '3.10', '3.11', '3.12' ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py-version }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          target: x86_64
          args: --release --out dist -i ${{ matrix.py-version }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheel-ubuntu-${{ matrix.py-version }}
          path: ${{ github.workspace }}/dist/*

  build-sdist:
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    needs: [ build-and-test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Build source distribution
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheel-sdist
          path: ${{ github.workspace }}/dist/*
            
  wheel-publish:
    name: Release
    runs-on: ubuntu-latest
    needs: [ build-macos, build-windows, build-linux, build-sdist ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Publish to PyPI
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing *
